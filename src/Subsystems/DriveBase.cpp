// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveBase.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Move.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveBase::DriveBase() : Subsystem("DriveBase") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    left1 = RobotMap::driveBaseLeft1;
    left2 = RobotMap::driveBaseLeft2;
    right1 = RobotMap::driveBaseRight1;
    right2 = RobotMap::driveBaseRight2;
    robotDrive41 = RobotMap::driveBaseRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveBase::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Move());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveBase::DriveWithJoysticks() {
	float left= (Robot::oi->getLeftJoystick()->GetY());
	float right= (Robot::oi->getRightJoystick()->GetY());

	robotDrive41->TankDrive(left,right);
}

void DriveBase::DriveWithGamepad() {
	float left= (Robot::oi->getGamePad()->GetY());
	float right= (Robot::oi->getGamePad()->GetThrottle());

	robotDrive41->TankDrive(-left,right);
}

void DriveBase::AutoDriveFeet(){
	left1->Set(-0.95);
	left2->Set(-0.95);
	right1->Set(1);
	right2->Set(1);
	Wait(1);
	left1->Set(0);
	left2->Set(0);
	right1->Set(0);
	right2->Set(0);

}
